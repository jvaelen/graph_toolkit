/*
 Author: Balazs Nemeth and Jeroen Vaelen
 Description: Graph is an abstract class that, when creating a new type of graph, this class is derived from. The derived classes implement the exceptions
     */

#ifndef GRAPH_H
#define GRAPH_H

#include <QDebug>
#include <string>
#include <vector>

#include "graph/integermatrix.h"
#include "graphComp/label.h"
#include "iterator/breadthfirstsearchiterator.h"
#include "iterator/depthfirstsearchiterator.h"
#include "visitor/visitor.h"
#include "observer/subject.h"

// forewarddeclare Node and Edge. Only Node* and Edge* are used in Graph
class Node;
class Edge;
// avoid circular dependence
class MatrixGraph;
class ListGraph;

using namespace std;

class Graph : public Subject
{
public:
    Graph();
    Graph(string name);
    /* created a graph using a integerMatrix. Because integerMatrix
    doesn't really hold any information about the names of nodes, this function assigns numbers as labels */
    Graph(const IntegerMatrix& integerMatrix);
    // copy constructor is needed because we use a vector of Node*
    Graph(const Graph& other);
    // destructor will clear the nodes
    virtual ~Graph();

    string getName() const {return _name;}
    void setName(string name) {_name = name;}
    // returns the graph in the form of a two tuple (V, E)
    virtual IntegerMatrix getIntegerMatrix() const = 0;
    /* create a new Node with that label and add that using a help function, this function is only called from within graph
        when a node is created by another method, this function is public because the derived classes have to have this function
        publicly defined. Also this function can't be called directly because this class is abract*/
    virtual void addNode(string nodeLabel = "");
    // removes ALL nodes from this graph
    void removeNodes();
    // removes a given node identified by a pointer to that node
    void removeNode(Node* node);
    /* removeNode(Node*) moet niet virtual zijn omdat removeNode(Label) al virtual is
       de correcte removeNode(Label) gaat gecalled worden en er wordt dan op het juiste object ingewerkt
       op dit object wordt dan removeNode(Node*) gecalled en alles is in orde */
    // removes a node identified by it's label
    virtual void removeNode(Label label);
    // this function is only used in CMD interface
    virtual void removeNode(int id);
    // returns the nodes. this is used by algorithmes and to create MatrixGraph from ListGraph
    vector<Node*> getNodes() const {return _nodes;}
    // accepts an algorithm
    virtual void accept(Visitor& v) = 0;

    // getters

    // DON'T use the _nodes.size() because edges is a special case and we want to have uniformity
    unsigned getNumberOfNodes() const {return _numberOfNodes; }
    unsigned getNumberOfEdges() const {return _numberOfEdges;}

    // functions for adding and removing edges. These functions are defined in the derived classes which implement edges in their proper way
    // this function is pure virtual because it can't be called from the baseclass
    virtual void addEdge(Label source, Label target, Label label) = 0;
    // delete all the edges
    virtual void removeEdges() = 0;

    // remove the edge given by the source and target. The label paramter is used to identify the edge in a unique way.
    virtual void removeEdge(Label source, Label target, Label label) = 0;


    // a graph should be creatable from other types
    virtual void recreateFrom(const Graph& other) = 0;
    // returns true if there are no nodes nor edges
    bool isEmpty() const {return _numberOfNodes == 0 && _numberOfEdges == 0;}
    // returns the neighbours of a node
    virtual vector<Node*> getNeighbours(Node* node) const = 0;
    // translates the label to a node and returns what getNeighbours(Node* node) would return
    vector<Node*> getNeighbours(Label label) const  {return getNeighbours(labelToNode(label));}
    // returns the outgoing edges of a node
    virtual vector<Edge*> getOutgoingEdges(Node* node) const = 0;
    vector<Edge*> getOutgoingEdges(Label label) const { return getOutgoingEdges(labelToNode(label));}
    // returns the incoming edges of a node
    virtual vector<Edge*> getIncomingEdges(Node* node)  const = 0;
    vector<Edge*> getIncomingEdges(Label label) const {return getIncomingEdges(labelToNode(label));}

    // iterators
    virtual BreadthFirstSearchIterator getBreadthFirstSearchIterator() const = 0;
    virtual DepthFirstSearchIterator getDepthFirstSearchIterator() const = 0;

    virtual string toString() const = 0;
    virtual string toStringID() const = 0;

protected:
    // help methods
    // addEdge is properly defined in the deriven classes
    // virtual void addEdge(Node* source, Node* target, Label label) = 0;
    // virtual void removeEdge(Node* source, Node* target,Label label) = 0;
    // virtual Edge* labelToEdge(Label label) const = 0;
    Node* labelToNode(Label label) const;
    int nodeToIndex(Node* node) const;
    /* adds a Node by a pointer to a node. the pointer should be allocated in some other method and then
        passed to this function. The node will then be added to the vector _nodes*/
    void addNode(Node* node);
    // returns true if the parameter is a unique label, meaning there is no other node with the same label
    bool isUniqueNode(Label label) const;
   // virtual bool isUniqueEdge(Edge edge) const = 0;
private:
    // help methods

protected:
    string _name;
    vector<Node*> _nodes;

    // keep track of the number of edges and nodes so that when the user of this class asks for these values, they don't have to be calculated.
    unsigned _numberOfEdges;
    unsigned _numberOfNodes;
};

#endif // GRAPH_H
